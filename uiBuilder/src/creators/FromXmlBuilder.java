package creators;

import helpers.Log;
import android.content.Context;
import android.os.Bundle;
import android.view.DragEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnDragListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.NumberPicker;
import android.widget.RadioButton;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.SearchView;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.TimePicker;
import data.ObjectValues;
import de.ur.rk.uibuilder.R;

/**
 * New objects are generated by this class using the "inflate layout from xml"
 * approach. The methods are fetching the associated xml layout files, which
 * just contain the main item as root element. The associated layout files
 * follow the convention: "item_" ( as prefix ) + "itemtype" + "_layout" ( as
 * suffix )
 * 
 * These layouts are inflated and default LayoutParams are set. Some complex
 * Android Framework elements require a container to catch unintended user
 * interaction with the element. The respective methods call for createContainer
 * the fetch a new container element, and add the generated item as a child.
 * 
 * The methods return either the element, or the element within a container, as
 * appropriate.
 * 
 * @author funklos
 * 
 */
public class FromXmlBuilder
{
	private LayoutInflater inflater;
	private Context context;

	public FromXmlBuilder(Context context)
	{
		this.context = context;
		this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	//IN CONTAINER
	protected View buildGrid()
	{
		GridView xmlGrid = (GridView) inflater.inflate(R.layout.item_gridview_layout, null);

		return xmlGrid;
	}

	//IN CONTAINER
	protected View buildTimePicker()
	{
		TimePicker xmlTimePicker = (TimePicker) inflater.inflate(R.layout.item_timepicker_layout, null);
		
		xmlTimePicker.setIs24HourView(true);
		xmlTimePicker.setEnabled(false);

		return xmlTimePicker;
	}

	//IN CONTAINER
	protected View buildSeekBar()
	{
		SeekBar xmlSeekBar = (SeekBar) inflater.inflate(R.layout.item_seekbar_layout, null);
		
		xmlSeekBar.setEnabled(false);
		xmlSeekBar.setActivated(true);

		return xmlSeekBar;
	}

	//IN CONTAINER
	protected View buildRatingBar()
	{
		RatingBar xmlRatingBar = (RatingBar) inflater.inflate(R.layout.item_ratingbar_layout, null);
		
		xmlRatingBar.setEnabled(true);
		xmlRatingBar.setActivated(true);
		xmlRatingBar.setMax(7);

		return xmlRatingBar;
	}

	//IN CONTAINER
	protected View buildListView()
	{
		ListView xmlList = (ListView) inflater.inflate(R.layout.item_istview_layout, null);

		return xmlList;
	}

	//IN CONTAINER
	protected View buildNumberPicker()
	{
		NumberPicker xmlPicker = (NumberPicker) inflater.inflate(R.layout.item_numberpicker_layout, null);

		xmlPicker.setEnabled(false);
		xmlPicker.setMaxValue(5);
		xmlPicker.setMinValue(1);
		xmlPicker.setWrapSelectorWheel(false);
		xmlPicker.setValue(3);
	
		return xmlPicker;
	}
/*
	protected LinearLayout buildRelativeContainer()
	{
		LinearLayout relativeLayout = new LinearLayout(context);
		relativeLayout.setBackgroundResource(R.drawable.object_background_default);
		relativeLayout.setOrientation(LinearLayout.HORIZONTAL);

		relativeLayout.setOnDragListener(new OnDragListener()
		{

			@Override
			public boolean onDrag(View v, DragEvent event)
			{
				switch (event.getAction()) {
				case DragEvent.ACTION_DRAG_STARTED:
					Bundle tagBundle = (Bundle) v.getTag();

					int id = tagBundle.getInt(ObjectValues.TYPE);
					
					 * if (id == R.id.element_container) { return false; }
					 * return true;
					 
				case DragEvent.ACTION_DRAG_ENTERED:

					return true;
				case DragEvent.ACTION_DRAG_EXITED:

					return true;

				case DragEvent.ACTION_DROP:
					// Dropped, reassign View to ViewGroup
					View view = (View) event.getLocalState();
					ViewGroup owner = (ViewGroup) view.getParent();
					owner.removeView(view);
					LinearLayout container = (LinearLayout) v;
					container.addView(view);

					view.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
					container.addView(view);

					return true;

				case DragEvent.ACTION_DRAG_LOCATION:
					return true;
				case DragEvent.ACTION_DRAG_ENDED:

				default:
					break;
				}
				return true;
			}
		});
		RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(200, 200);

		relativeLayout.setLayoutParams(params);
		return relativeLayout;

	}*/

	protected RelativeLayout createContainer()
	{

		RelativeLayout container = new RelativeLayout(context)
		{

			@Override
			public boolean onInterceptTouchEvent(MotionEvent ev)
			{
				Log.d("CONTAINER", "INTERCEPTING MOTION EVENT");
				return true;
			}

		};
		container.setBackgroundResource(R.drawable.object_background_default);
		container.setClickable(true);
		container.setFocusable(true);
		container.setFocusableInTouchMode(true);
		container.setEnabled(true);
		container.setMotionEventSplittingEnabled(false);
		container.setFilterTouchesWhenObscured(false);
		
		return container;
	}

	//IN CONTAINER
	protected View buildSearchView()
	{
		SearchView xmlSearchView = (SearchView) inflater.inflate(R.layout.item_searchview_layout, null);

		return xmlSearchView;
	}

	
	protected View buildCheckBox() //
	{
		LinearLayout xmlCheckBox = (LinearLayout) inflater.inflate(R.layout.item_checkbox_layout, null);

		return xmlCheckBox;
	}

	
	protected View buildSwitch()
	{	
		Switch xmlSwitch = (Switch) inflater.inflate(R.layout.item_switch_layout, null);

		return xmlSwitch;
	}

	protected View buildRadioButtons()
	{
		RadioButton xmlRadioButton = (RadioButton) inflater.inflate(R.layout.item_radiobutton_layout, null);

		return xmlRadioButton;
	}

	/**
	 * Generate new TextView from xml resource
	 * 
	 * @return new TextView
	 */
	protected TextView buildTextview()
	{
		TextView xmlTextView = (TextView) inflater.inflate(R.layout.item_textview_layout, null);

		return xmlTextView;
	}

	/**
	 * Generate new ImageView from xml resource
	 * 
	 * @return the newly generated ImageView
	 */
	protected ImageView buildImageView()
	{	
		ImageView xmlImageView = (ImageView) inflater.inflate(R.layout.item_imageview_layout, null);
	
		return xmlImageView;
	}

	/**
	 * Generate new EditText from xml resource
	 * 
	 * @return new Edittext
	 */
	protected EditText buildEditText()
	{	
		EditText xmlEditText = (EditText) inflater.inflate(R.layout.item_edittext_layout, null);
	
		return xmlEditText;
	}

	/**
	 * Generate new Button from xml resource
	 * 
	 * @return new Button
	 */
	protected Button buildButton()
	{
		Button xmlButton = (Button) inflater.inflate(R.layout.item_button_layout, null);
	
		return xmlButton;
	}
	
	protected Spinner buildSpinner()
	{
		Spinner xmlSpinner = (Spinner) inflater.inflate(R.layout.item_spinner_layout, null);

		return xmlSpinner;
	}
}
